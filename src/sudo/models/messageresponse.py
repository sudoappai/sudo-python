"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .toolcall import ToolCall, ToolCallTypedDict
from pydantic import model_serializer
from sudo.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Any, List, Optional
from typing_extensions import NotRequired, TypedDict


class MessageResponseTypedDict(TypedDict):
    role: str
    annotations: NotRequired[Any]
    audio: NotRequired[Any]
    content: NotRequired[Nullable[str]]
    refusal: NotRequired[Nullable[str]]
    tool_calls: NotRequired[Nullable[List[ToolCallTypedDict]]]


class MessageResponse(BaseModel):
    role: str

    annotations: Optional[Any] = None

    audio: Optional[Any] = None

    content: OptionalNullable[str] = UNSET

    refusal: OptionalNullable[str] = UNSET

    tool_calls: OptionalNullable[List[ToolCall]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["annotations", "audio", "content", "refusal", "tool_calls"]
        nullable_fields = ["content", "refusal", "tool_calls"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
